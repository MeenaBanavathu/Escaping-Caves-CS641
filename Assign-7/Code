{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 9,
      "id": "8cb3f907",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8cb3f907",
        "outputId": "ed9b6a53-d55f-4dac-995a-4ab6a12a4c90"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "p : [23, 62, 124, 37, 73, 104, 5, 47, 97, 60, 8, 33, 39, 97, 121, 38, 30, 126, 60, 70, 123, 113, 38, 90, 50, 115, 36, 118, 75, 55, 36, 43]\n",
            "m : 23\n",
            "len_e : 32\n",
            "e : [1, 62, 82, 118, 1, 85, 74, 103, 108, 7, 67, 43, 64, 75, 29, 2, 123, 26, 68, 116, 77, 41, 33, 94, 0, 0, 0, 0, 0, 0, 0, 0]\n"
          ]
        }
      ],
      "source": [
        "mod = 127\n",
        "n = 32\n",
        "import numpy as np\n",
        "\n",
        "p = [23, 62, 124, 37, 73, 104, 5, 47, 97, 60, 8, 33, 39, 97, 121, 38, 30, 126, 60, 70, 123, 113, 38, 90, 50, 115, 36, 118, 75, 55, 36, 43]\n",
        "print(\"p :\", p)\n",
        "m = p[0]\n",
        "print(\"m :\", m)\n",
        "\n",
        "e = []\n",
        "e.append(1)\n",
        "\n",
        "for i in range (1,n):\n",
        "    el = 0\n",
        "    for j in range (1, i+1):\n",
        "        el += ((-1)**(j-1))*e[i-j]*p[j]\n",
        "        el %= mod\n",
        "    el = el*(i**(mod-2))\n",
        "    el %= mod\n",
        "    e.append(el)\n",
        "    \n",
        "print(\"len_e :\", len(e))\n",
        "print(\"e :\" ,e)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "id": "bbfb0b53",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bbfb0b53",
        "outputId": "012c99e0-a4d0-4aeb-de00-28b2d95490e0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 117]\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "\n",
        "roots = []\n",
        "for root in range(102, 118):\n",
        "    x = 0\n",
        "    for i in range(0,n):\n",
        "        x = x + ((-1)**(i))*e[i]*(root**(n-i-1))\n",
        "        x = x%mod\n",
        "    if(x == 0):\n",
        "        roots.append(root)\n",
        "    \n",
        "print(roots)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "id": "e653dbeb",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e653dbeb",
        "outputId": "fa2c3d03-d866-4d79-ceac-7adf52571306"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "102 f\n",
            "103 g\n",
            "104 h\n",
            "105 i\n",
            "106 j\n",
            "107 k\n",
            "108 l\n",
            "109 m\n",
            "111 o\n",
            "112 p\n",
            "113 q\n",
            "117 u\n"
          ]
        }
      ],
      "source": [
        "ascii_ = []\n",
        "for i in roots:\n",
        "    ascii = chr(i)\n",
        "    print(i, ascii)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "id": "73ddb823",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "73ddb823",
        "outputId": "4dfa5ec3-84ab-4d4f-91c5-b6927637c743"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "12\n",
            "[102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 117]\n",
            "11\n",
            "len_A:  12\n",
            "len_B:  12\n",
            "A:  [[61, 68, 82, 103, 120, 19, 107, 13, 8, 69, 44, 38], [126, 19, 19, 20, 20, 1, 126, 20, 126, 108, 19, 1], [25, 52, 71, 68, 88, 107, 19, 21, 16, 31, 115, 117], [10, 22, 18, 28, 57, 19, 20, 3, 125, 43, 41, 100], [4, 107, 94, 19, 73, 1, 1, 73, 32, 117, 61, 16], [27, 99, 124, 90, 118, 107, 108, 83, 123, 23, 35, 94], [87, 37, 69, 52, 62, 19, 107, 30, 64, 36, 18, 76], [111, 1, 64, 126, 95, 1, 126, 95, 119, 95, 2, 2], [19, 103, 52, 22, 37, 107, 19, 68, 1, 99, 99, 107], [33, 68, 74, 24, 112, 19, 20, 46, 111, 39, 11, 73], [64, 19, 76, 107, 61, 1, 1, 61, 2, 50, 100, 32], [51, 52, 30, 59, 116, 107, 108, 45, 95, 12, 124, 61]]\n",
            "B:  [123, 113, 38, 90, 50, 115, 36, 118, 75, 55, 36, 43]\n"
          ]
        }
      ],
      "source": [
        "num_rts = len(roots)\n",
        "print(num_rts)\n",
        "password = []\n",
        "for i in roots:\n",
        "    if(i):\n",
        "        password.append(i)\n",
        "print(password)\n",
        "\n",
        "rem_psswrd = p[0] - num_rts\n",
        "print(rem_psswrd)\n",
        "\n",
        "\n",
        "A = []\n",
        "B = []\n",
        "\n",
        "start = 32 - num_rts\n",
        "for j in range(start, start + num_rts):\n",
        "    row = []\n",
        "    for k in password:\n",
        "        cell = (k ** j)\n",
        "        cell = cell % mod\n",
        "        row.append(cell)\n",
        "    A.append(row)\n",
        "    B.append(p[j])    \n",
        "    \n",
        "print(\"len_A: \", len(A))\n",
        "print(\"len_B: \", len(B))\n",
        "print(\"A: \", A)\n",
        "print(\"B: \", B)\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "id": "caf53e0b",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "caf53e0b",
        "outputId": "85c8d608-2c67-435b-9df9-40cad2a5c3fd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fghijklmopqu\n"
          ]
        }
      ],
      "source": [
        "#from sage\n",
        "final_password = \"\"\n",
        "for i in range(0, len(password)):\n",
        "         final_password = final_password + chr(password[i])\n",
        "    \n",
        "print(final_password)"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.7"
    },
    "colab": {
      "name": "crypt_7.ipynb",
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
